{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8fcd641.chunk.js","sourcesContent":["// Needed libraries\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// Square function component, includes the onClock property\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// The main board class\r\nclass Board extends React.Component {\r\n\r\n    // The square renderer\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    // Setting up the board rows\r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            {this.renderSquare(3)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(8)}\r\n            {this.renderSquare(9)}\r\n            {this.renderSquare(10)}\r\n            {this.renderSquare(11)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(12)}\r\n            {this.renderSquare(13)}\r\n            {this.renderSquare(14)}\r\n            {this.renderSquare(15)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // Sets up the actual game, and sets up empty squares\r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [\r\n          {\r\n            squares: Array(16).fill(null)\r\n          }\r\n        ],\r\n        stepNumber: 0,\r\n        xIsNext: true\r\n      };\r\n    }\r\n  \r\n    // Sets up board history, current, and squares\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n\r\n      // Checks a winner\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n\r\n      // Sets up the red and yellow circles\r\n      squares[i] = this.state.xIsNext ? \"ðŸ”´\" : \"ðŸŸ¡\";\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: squares\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n  \r\n    // Goes to the next step\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0\r\n      });\r\n    }\r\n  \r\n    // Shows the moves completed so far\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n  \r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n          'Go to move #' + move :\r\n          'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      // States the game state\r\n      let status;\r\n      if (winner) {\r\n        status = \"Winner: \" + winner;\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"ðŸ”´\" : \"ðŸŸ¡\");\r\n      }\r\n  \r\n      // Returns the game so far in the game class\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={i => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // Renders the game\r\n  ReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n  \r\n  // Fucntion to calcualte the winner, what squares are needed for a win\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n\r\n        // rows\r\n        [0, 1, 2, 3],\r\n        [4, 5, 6, 7],\r\n        [8, 9, 10, 11],\r\n        [12, 13, 14, 15],\r\n\r\n        // Columns\r\n        [0, 4, 8, 12],\r\n        [1, 5, 9, 13],\r\n        [2, 6, 10, 14],\r\n        [3, 7, 11, 15],\r\n\r\n        // Diagonals\r\n        [0, 5, 10, 15],\r\n        [3, 6, 9, 12], \r\n    ];\r\n\r\n    // Makes sure that there are actually 4 in a row\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c, d] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  "],"sourceRoot":""}